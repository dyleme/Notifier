// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/Notifier/internal/notifierjob (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/notifier_mocks.go -package=mocks . Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domains "github.com/Dyleme/Notifier/internal/domains"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetNearest mocks base method.
func (m *MockRepository) GetNearest(arg0 context.Context) (domains.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearest", arg0)
	ret0, _ := ret[0].(domains.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearest indicates an expected call of GetNearest.
func (mr *MockRepositoryMockRecorder) GetNearest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearest", reflect.TypeOf((*MockRepository)(nil).GetNearest), arg0)
}

// ListNotSended mocks base method.
func (m *MockRepository) ListNotSended(arg0 context.Context, arg1 time.Time) ([]domains.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotSended", arg0, arg1)
	ret0, _ := ret[0].([]domains.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotSended indicates an expected call of ListNotSended.
func (mr *MockRepositoryMockRecorder) ListNotSended(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotSended", reflect.TypeOf((*MockRepository)(nil).ListNotSended), arg0, arg1)
}

// Update mocks base method.
func (m *MockRepository) Update(arg0 context.Context, arg1 domains.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), arg0, arg1)
}
